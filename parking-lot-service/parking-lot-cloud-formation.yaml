AWSTemplateFormatVersion: '2010-09-09'
Description: Parking Lot Assignment

Resources:
  parkingEntriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: parkingEntries
      AttributeDefinitions:
        - AttributeName: ticketId
          AttributeType: S
      KeySchema:
        - AttributeName: ticketId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ParkingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ParkingLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/parkingEntries

  ParkingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ParkingLambda
      Runtime: nodejs18.x
      Role: !GetAtt ParkingLambdaRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          const crypto = require("crypto")
          const { DynamoDBClient, PutItemCommand, GetItemCommand } = require('@aws-sdk/client-dynamodb');

          const dynamoDb = new DynamoDBClient({ });
          const TABLE_NAME = 'parkingEntries';

          exports.handler = async (event) => {
              const { httpMethod, path, queryStringParameters } = event;

              if (httpMethod === 'POST' && path === '/entry') {
                  return handleEntry(queryStringParameters);
              } else if (httpMethod === 'POST' && path === '/exit') {
                  return handleExit(queryStringParameters);
              } else {
                  return {
                      statusCode: 400,
                      body: JSON.stringify({ message: 'Invalid request' }),
                  };
              }
          };

          const handleEntry = async ({ plate, parkingLot }) => {
              const ticketId = crypto.randomUUID();
              const entryTime = Date.now();

              const params = {
                  TableName: TABLE_NAME,
                  Item: {
                      ticketId: { S: ticketId },
                      plate: { S: plate },
                      parkingLot: { S: parkingLot },
                      entryTime: { N: entryTime.toString() }
                  },
              };

              try {
                  await dynamoDb.send(new PutItemCommand(params));
                  return {
                      statusCode: 200,
                      body: JSON.stringify({ ticketId }),
                  };
              } catch (error) {
                  console.error('Error adding item to DynamoDB:', error);
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ message: 'Error adding item to DynamoDB' }),
                  };
              }
          };

          const handleExit = async ({ ticketId }) => {
              const params = {
                  TableName: TABLE_NAME,
                  Key: { ticketId: { S: ticketId } },
              };

              try {
                  const { Item } = await dynamoDb.send(new GetItemCommand(params));

                  if (!Item) {
                      return {
                          statusCode: 404,
                          body: JSON.stringify({ message: 'Ticket not found' }),
                      };
                  }

                  const exitTime = Date.now();
                  const totalTime = exitTime - parseInt(Item.entryTime.N);
                  const totalMinutes = Math.ceil(totalTime / (1000 * 60));
                  const totalHours = totalMinutes / 60;
                  const charge = (totalHours * 10).toFixed(2);

                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          plate: Item.plate.S,
                          totalTime: `${Math.floor(totalHours)} hours ${totalMinutes % 60} minutes`,
                          parkingLot: Item.parkingLot.S,
                          charge: `$${charge}`
                      }),
                  };
              } catch (error) {
                  console.error('Error retrieving item from DynamoDB:', error);
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ message: 'Error retrieving item from DynamoDB' }),
                  };
              }
          };

  ParkingApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ParkingAPI
      Description: API for parking system

  EntryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ParkingApiGateway.RootResourceId
      PathPart: entry
      RestApiId: !Ref ParkingApiGateway

  EntryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref EntryResource
      RestApiId: !Ref ParkingApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ParkingLambdaFunction.Arn}/invocations

  ExitResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ParkingApiGateway.RootResourceId
      PathPart: exit
      RestApiId: !Ref ParkingApiGateway

  ExitMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ExitResource
      RestApiId: !Ref ParkingApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ParkingLambdaFunction.Arn}/invocations

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ParkingLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ParkingApiGateway}/*
  ParkingApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: EntryMethod
    Properties:
      RestApiId: !Ref ParkingApiGateway
      StageName: Prod

  ProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref ParkingApiGateway
      DeploymentId: !Ref ParkingApiGatewayDeployment
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          DataTraceEnabled: true

Outputs:
  ApiUrl:
    Value: !Sub https://${ParkingApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod
    Description: URL of the API Gateway
