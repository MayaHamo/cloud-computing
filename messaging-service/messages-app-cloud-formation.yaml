---
Metadata:
  TemplateId: "arn:aws:cloudformation:eu-central-1:260423486053:generatedTemplate/1b017c7d-94d8-49bc-9bf8-e64038bb5471"
Parameters:
  LambdaFunction00test004e2PVCodeS3BucketOneOffWxn9:
    NoEcho: "true"
    Type: "String"
    Description: "An Amazon S3 bucket in the same AWS-Region as your function. The\
      \ bucket can be in a different AWS-account.\nThis property can be replaced with\
      \ other exclusive properties"
  LambdaFunction00test004e2PVCodeS3KeyOneOfw2d3d:
    NoEcho: "true"
    Type: "String"
    Description: "The Amazon S3 key of the deployment package.\nThis property can\
      \ be replaced with other exclusive properties"
Resources:
  ApiGatewayStage00default00reBj8:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::Stage"
    DeletionPolicy: "Retain"
    Properties:
      RestApiId:
        Ref: "ApiGatewayRestApi00p3x4o71iw5007Ocw0"
      DeploymentId:
        Fn::GetAtt:
        - "ApiGatewayDeployment003xbij700SJqcg"
        - "DeploymentId"
      Description: "Created by AWS Lambda"
      StageName: "default"
      TracingEnabled: false
      CacheClusterEnabled: false
  LambdaPermission00functiontest00Qhm3B:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/POST/groups/*/remove/*"
      Principal: "apigateway.amazonaws.com"
  LambdaPermission00functiontest00oyIHy:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/DELETE/users/*"
      Principal: "apigateway.amazonaws.com"
  DynamoDBTable00groups00XgI8U:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    Properties:
      SSESpecification:
        SSEEnabled: false
      TableName: "groups"
      AttributeDefinitions:
      - AttributeType: "S"
        AttributeName: "id"
      ContributorInsightsSpecification:
        Enabled: false
      BillingMode: "PROVISIONED"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      KeySchema:
      - KeyType: "HASH"
        AttributeName: "id"
      DeletionProtectionEnabled: false
      TableClass: "STANDARD"
      Tags: []
      TimeToLiveSpecification:
        Enabled: false
  IAMManagedPolicy00policyserviceroleAWSLambdaBasicExecutionRole339158f2148c4c52aebb95d0bbd0555500IqD0y:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Retain"
    Properties:
      ManagedPolicyName: "AWSLambdaBasicExecutionRole-339158f2-148c-4c52-aebb-95d0bbd05555"
      Path: "/service-role/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: "arn:aws:logs:eu-central-1:260423486053:*"
          Action: "logs:CreateLogGroup"
          Effect: "Allow"
        - Resource:
          - "arn:aws:logs:eu-central-1:260423486053:log-group:/aws/lambda/test:*"
          Action:
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          Effect: "Allow"
      Roles:
      - Ref: "IAMRole00admintest00KXUOX"
      Users: []
  ApiGatewayDeployment003xbij700SJqcg:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::Deployment"
    DeletionPolicy: "Retain"
    Properties:
      RestApiId:
        Ref: "ApiGatewayRestApi00p3x4o71iw5007Ocw0"
  ApiGatewayRestApi00p3x4o71iw5007Ocw0:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::RestApi"
    DeletionPolicy: "Retain"
    Properties:
      ApiKeySourceType: "HEADER"
      Description: "Created by AWS Lambda"
      EndpointConfiguration:
        Types:
        - "REGIONAL"
      DisableExecuteApiEndpoint: false
      Name: "test-API"
  LambdaPermission00functiontest00iKezY:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/POST/messages/*/group/*"
      Principal: "apigateway.amazonaws.com"
  LambdaPermission00functiontest002EIVO:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/GET/messages/*"
      Principal: "apigateway.amazonaws.com"
  LambdaPermission00functiontest008BEeN:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/POST/messages/user/*"
      Principal: "apigateway.amazonaws.com"
  LambdaFunction00test004e2PV:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Function"
    DeletionPolicy: "Retain"
    Properties:
      MemorySize: 512
      Description: "A simple backend (read/write to DynamoDB) with a RESTful API endpoint\
        \ using Amazon API Gateway."
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 10
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "index.handler"
      Code:
        S3Bucket:
          Ref: "LambdaFunction00test004e2PVCodeS3BucketOneOffWxn9"
        S3Key:
          Ref: "LambdaFunction00test004e2PVCodeS3KeyOneOfw2d3d"
      Role:
        Fn::GetAtt:
        - "IAMRole00admintest00KXUOX"
        - "Arn"
      FileSystemConfigs: []
      FunctionName: "test"
      Runtime: "nodejs18.x"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: "/aws/lambda/test"
      EphemeralStorage:
        Size: 512
      Tags:
      - Value: "microservice-http-endpoint"
        Key: "lambda-console:blueprint"
      Architectures:
      - "x86_64"
  LambdaPermission00functiontest00Ee9a6:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/GET/users/*"
      Principal: "apigateway.amazonaws.com"
  LambdaPermission00functiontest00uOwux:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/DELETE/users/*/block/*"
      Principal: "apigateway.amazonaws.com"
  IAMRole00admintest00KXUOX:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Retain"
    Properties:
      Path: "/service-role/"
      ManagedPolicyArns:
      - "arn:aws:iam::260423486053:policy/service-role/AWSLambdaMicroserviceExecutionRole-38163311-3f5e-49c2-ac8c-f31c494a0529"
      - "arn:aws:iam::260423486053:policy/service-role/AWSLambdaBasicExecutionRole-339158f2-148c-4c52-aebb-95d0bbd05555"
      MaxSessionDuration: 3600
      RoleName: "admin-test"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  LambdaPermission00functiontest00M2Heo:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/POST/groups"
      Principal: "apigateway.amazonaws.com"
  IAMManagedPolicy00policyserviceroleAWSLambdaMicroserviceExecutionRole381633113f5e49c2ac8cf31c494a052900NYDEg:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Retain"
    Properties:
      ManagedPolicyName: "AWSLambdaMicroserviceExecutionRole-38163311-3f5e-49c2-ac8c-f31c494a0529"
      Path: "/service-role/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: "arn:aws:dynamodb:eu-central-1:260423486053:table/*"
          Action:
          - "dynamodb:DeleteItem"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:UpdateItem"
          - "dynamodb:Query"
          Effect: "Allow"
      Roles:
      - Ref: "IAMRole00admintest00KXUOX"
      Users: []
  LambdaPermission00functiontest00zGp6t:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/POST/users/*/block/*"
      Principal: "apigateway.amazonaws.com"
  DynamoDBTable00users003LYN9:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    Properties:
      SSESpecification:
        SSEEnabled: false
      TableName: "users"
      AttributeDefinitions:
      - AttributeType: "S"
        AttributeName: "id"
      ContributorInsightsSpecification:
        Enabled: false
      BillingMode: "PROVISIONED"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      KeySchema:
      - KeyType: "HASH"
        AttributeName: "id"
      DeletionProtectionEnabled: false
      TableClass: "STANDARD"
      Tags: []
      TimeToLiveSpecification:
        Enabled: false
  LambdaPermission00functiontest00ebYRW:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/GET/groups/*"
      Principal: "apigateway.amazonaws.com"
  LambdaPermission00functiontest00PEAkS:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/POST/groups/*/add/*"
      Principal: "apigateway.amazonaws.com"
  LambdaPermission00functiontest00tf3JX:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/POST/messages/group/*"
      Principal: "apigateway.amazonaws.com"
  ApiGatewayDeployment001d18sm00iqVVd:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::Deployment"
    DeletionPolicy: "Retain"
    Properties:
      RestApiId:
        Ref: "ApiGatewayRestApi00p3x4o71iw5007Ocw0"
      Description: "Created by AWS Lambda"
  DynamoDBTable00messages00liD46:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    Properties:
      SSESpecification:
        SSEEnabled: false
      TableName: "messages"
      AttributeDefinitions:
      - AttributeType: "N"
        AttributeName: "dateCreated"
      - AttributeType: "S"
        AttributeName: "recipient"
      ContributorInsightsSpecification:
        Enabled: false
      BillingMode: "PROVISIONED"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      KeySchema:
      - KeyType: "HASH"
        AttributeName: "recipient"
      - KeyType: "RANGE"
        AttributeName: "dateCreated"
      DeletionProtectionEnabled: false
      TableClass: "STANDARD"
      Tags: []
      TimeToLiveSpecification:
        Enabled: false
  LambdaPermission00functiontest00kPQQY:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunction00test004e2PV"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:eu-central-1:260423486053:p3x4o71iw5/*/POST/users"
      Principal: "apigateway.amazonaws.com"
