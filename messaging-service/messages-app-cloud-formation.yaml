---
Metadata:
  TemplateId: "arn:aws:cloudformation:eu-central-1:260423486053:generatedTemplate/710feb3c-6c36-4cba-8d6b-3b85b115e01e"
Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: users
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      AttributeDefinitions:
      - AttributeType: S
        AttributeName: id
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  GroupsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: groups
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      AttributeDefinitions:
      - AttributeType: S
        AttributeName: id
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: messages
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      AttributeDefinitions:
      - AttributeType: N
        AttributeName: dateCreated
      - AttributeType: S
        AttributeName: recipient
      KeySchema:
        - AttributeName: recipient
          KeyType: HASH
        - AttributeName: dateCreated
          KeyType: RANGE
  MessagesAppLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MessagesAppLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/groups
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/messages
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/users
  MessagesAppLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      MemorySize: 512
      Description: "A simple backend (read/write to DynamoDB) with a RESTful API endpoint\
        \ using Amazon API Gateway."
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 10
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "index.handler"
      Code:
        S3Bucket: "maya-messages-app"
        S3Key: "test-7afbff9c-647a-45e3-b0e8-53570a27eb5b.zip"
      Role: !GetAtt MessagesAppLambdaRole.Arn
      FileSystemConfigs: []
      FunctionName: "test"
      Runtime: "nodejs18.x"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: "/aws/lambda/test"
      EphemeralStorage:
        Size: 512
      Tags:
      - Value: "microservice-http-endpoint"
        Key: "lambda-console:blueprint"
      Architectures:
      - "x86_64"
  # API Gateway REST API
  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "MessagesAppAPI"
      Description: "API for Messages Application"
      EndpointConfiguration:
        Types:
          - "REGIONAL"

  # API Gateway resources and methods
  ApiGatewayResourceUsers:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "users"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceUsersId:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceUsers
      PathPart: "{id}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceUsersIdBlock:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceUsersId
      PathPart: "block"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceUsersIdBlockBlockUser:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceUsersIdBlock
      PathPart: "{blockUser}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceGroups:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "groups"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceGroupsId:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGroups
      PathPart: "{id}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceGroupsIdAdd:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGroupsId
      PathPart: "add"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceGroupsIdAddMemberId:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGroupsIdAdd
      PathPart: "{memberId}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceGroupsIdRemove:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGroupsId
      PathPart: "remove"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceGroupsIdRemoveMemberId:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceGroupsIdRemove
      PathPart: "{memberId}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceMessages:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "messages"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceMessagesRecipient:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceMessages
      PathPart: "{recipient}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceMessagesUser:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceMessages
      PathPart: "user"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceMessagesUserRecipient:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceMessagesUser
      PathPart: "{recipient}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceMessagesGroup:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceMessages
      PathPart: "group"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceMessagesGroupGroupId:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayResourceMessagesGroup
      PathPart: "{groupId}"
      RestApiId: !Ref ApiGatewayRestApi

  # Methods for /users
  ApiGatewayMethodUsersPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResourceUsers
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  # Methods for /users/{id}
  ApiGatewayMethodUsersIdGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !Ref ApiGatewayResourceUsersId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  ApiGatewayMethodUsersIdDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "DELETE"
      ResourceId: !Ref ApiGatewayResourceUsersId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  # Methods for /users/{id}/block/{blockUser}
  ApiGatewayMethodUsersIdBlockBlockUserPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResourceUsersIdBlockBlockUser
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  ApiGatewayMethodUsersIdBlockBlockUserDelete:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "DELETE"
      ResourceId: !Ref ApiGatewayResourceUsersIdBlockBlockUser
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  # Methods for /groups
  ApiGatewayMethodGroupsPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResourceGroups
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  # Methods for /groups/{id}
  ApiGatewayMethodGroupsIdGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !Ref ApiGatewayResourceGroupsId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  # Methods for /groups/{id}/add/{memberId}
  ApiGatewayMethodGroupsIdAddMemberIdPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResourceGroupsIdAddMemberId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  # Methods for /groups/{id}/remove/{memberId}
  ApiGatewayMethodGroupsIdRemoveMemberIdPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResourceGroupsIdRemoveMemberId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  # Methods for /messages/{recipient}?from={timestamp}
  ApiGatewayMethodMessagesRecipientPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !Ref ApiGatewayResourceMessagesRecipient
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  # Methods for /messages/user/{recipient}
  ApiGatewayMethodMessagesUserRecipientPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResourceMessagesUserRecipient
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  # Methods for /messages/group/{groupId}
  ApiGatewayMethodMessagesGroupGroupIdPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResourceMessagesGroupGroupId
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagesAppLambdaFunction.Arn}/invocations"

  MessagesAppApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethodMessagesGroupGroupIdPost
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: Prod

  ProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref ApiGatewayRestApi
      DeploymentId: !Ref MessagesAppApiGatewayDeployment
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          DataTraceEnabled: true
  #Lambda Permissions
  LambdaInvokePermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName: !Ref MessagesAppLambdaFunction
        Action: "lambda:InvokeFunction"
        Principal: "apigateway.amazonaws.com"
        SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*

Outputs:
  ApiUrl:
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod
    Description: URL of the API Gateway
